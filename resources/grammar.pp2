
%token T_FLOAT    \d+\.\d+
%token T_INT      \d+

%token T_PLUS     \+
%token T_MINUS    \-
%token T_MUL      \*
%token T_DIV      [/รท]

%token T_BRACE_OPEN   \(
%token T_BRACE_CLOSE  \)

%skip  T_WHITESPACE \s+

%pragma root Expression

#Expression
  : Addition()
  | Subtraction()
  | Term()
  ;

Term
  : Multiplication()
  | Division()
  | Factor()
  ;

Factor
  : ::T_BRACE_OPEN:: Expression() ::T_BRACE_CLOSE::
  | Unary()
  ;

Subtraction -> {
    return new Ast\Expression\Subtraction(
        $children[0],
        $children[1],
        $token->getOffset(),
    );
}
  : Term() ::T_MINUS:: Expression()
  ;

Addition -> {
    return new Ast\Expression\Addition(
        $children[0],
        $children[1],
        $token->getOffset(),
    );
}
  : Term() ::T_PLUS:: Expression()
  ;

Multiplication -> {
    return new Ast\Expression\Multiplication(
        $children[0],
        $children[1],
        $token->getOffset(),
    );
}
  : Factor() ::T_MUL:: Term()
  ;

Division -> {
    return new Ast\Expression\Division(
        $children[0],
        $children[1],
        $token->getOffset(),
    );
}
  : Factor() ::T_DIV:: Term()
  ;

Unary
  : Value()
  | Minus()
  ;

Minus -> { return new Ast\Expression\Minus($children[0]); }
  : ::T_MINUS:: Expression()
  ;

Value
 : IntValue()
 | FloatValue()
 ;

IntValue -> { return new Ast\Expression\IntValue($children->getValue()); }
  : <T_INT>
  ;

FloatValue -> { return new Ast\Expression\FloatValue($children->getValue()); }
  : <T_FLOAT>
  ;
